name: Updates master branch from upstream repository

on:
  workflow_dispatch:
    inputs:
      repository:
        description: "The repository to sync"
        required: true
        default: "hwinther/pve-manager"
        type: string
  workflow_call:
    inputs:
      repository:
        description: "The repository to sync"
        required: true
        default: "hwinther/pve-manager"
        type: string

jobs:
  sync-from-upstream:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          ref: "master"
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          # git clone https://github.com/${{ inputs.repository }}
          echo basename=$(basename ${{ inputs.repository }})
          # cd $(basename ${{ inputs.repository }})

          upstream_repo=$(echo ${{ inputs.repository }} | sed -e 's/hwinther/proxmox/')
          echo upstream_repo=$upstream_repo
          git remote add upstream https://github.com/$upstream_repo.git
          git fetch upstream

          git checkout master
          git rebase upstream/master
          git push --force-with-lease origin master

  update-submodule:
    runs-on: ubuntu-latest
    needs: [sync-from-upstream]
    outputs:
      changed: ${{ steps.update-submodule.outputs.changed }}
      submodule: ${{ steps.update-submodule.outputs.submodule }}

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.WORKFLOW_TOKEN }}

      - name: Update submodule
        id: update-submodule
        run: |
          git config user.name "${{ github.actor }}"
          git config user.email "${{ github.actor }}@users.noreply.github.com"

          submodule=$(echo ${{ inputs.repository }} | sed -e 's|hwinther/||')
          echo submodule=$submodule
          echo "submodule=$submodule" >> $GITHUB_OUTPUT

          sed -i -e 's|git@github.com:|https://github.com/|' .gitmodules # switch from ssh to https because we don't have ssh keys in the pipeline
          git submodule update --init --remote submodules/$submodule
          # pushd submodules/$submodule
          # git fetch
          # changelogChanges=$(git diff ..master -- debian/changelog | wc -l)
          changelogChanges=$(git diff --submodule=diff | grep "debian/changelog" | wc -l)
          if [ $changelogChanges -eq 0 ]; then
            echo No changes in debian/changelog
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          fi
          # git pull
          # popd
          git checkout -- .gitmodules # revert the change to .gitmodules

          git status
          if output=$(git status --porcelain) && [ -z "$output" ]; then
            # Working directory clean - do nothing
            echo Working directory clean
            echo "changed=false" >> $GITHUB_OUTPUT
            exit 0
          else 
            # Uncommitted changes
            echo Add and commit changes
            git add submodules/$submodule
            git commit -m "Update submodule $submodule"
            git pull --rebase origin main # final rebase before pushing in case another pipeline changed it recently
            git push origin main
            echo "changed=true" >> $GITHUB_OUTPUT
          fi

  build-deb-when-changed:
    uses: hwinther/wsh-pve/.github/workflows/build-deb.yml@main
    needs: [update-submodule]
    if: ${{ needs.update-submodule.outputs.changed == 'true' }}
    with:
      package: ${{ needs.update-submodule.outputs.submodule }}
    secrets: inherit
