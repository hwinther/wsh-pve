diff --git a/PVE/QemuServer.pm b/PVE/QemuServer.pm
index 2046a7c..aa26d02 100644
--- a/PVE/QemuServer.pm
+++ b/PVE/QemuServer.pm
@@ -185,7 +185,7 @@ my $vga_fmt = {
 	default => 'std',
 	optional => 1,
 	default_key => 1,
-	enum => [qw(cirrus qxl qxl2 qxl3 qxl4 none serial0 serial1 serial2 serial3 std virtio virtio-gl vmware)],
+	enum => [qw(qxl qxl2 qxl3 qxl4 none serial0 serial1 serial2 serial3 std virtio virtio-gl vmware cirrus tcx cg3)],
     },
     memory => {
 	description => "Sets the VGA memory (in MiB). Has no effect with serial display.",
@@ -201,6 +201,20 @@ my $vga_fmt = {
 	enum => ['vnc'],
 	optional => 1,
     },
+	server =>  {
+	type => 'string',
+	pattern => '^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?',
+	default => '',
+	optional => 1,
+	description => "Local or network address of the X server",
+	format_description => 'uri://host:display'
+    },
+	mesa => {
+	type => 'boolean',
+	optional => 1,
+	default => '0',
+	description =>  "Enable 3dfx/mesa passthrough. This is only useful for Windows 9X/XP guests.",
+    },
 };
 
 my $ivshmem_fmt = {
@@ -221,16 +235,24 @@ my $ivshmem_fmt = {
 my $audio_fmt = {
     device => {
 	type => 'string',
-	enum => [qw(ich9-intel-hda intel-hda AC97)],
+	enum => [qw(ich9-intel-hda intel-hda AC97 sb16 adlib pcspk sb16-adlib-pcspk)],
 	description =>  "Configure an audio device."
     },
     driver =>  {
 	type => 'string',
-	enum => ['spice', 'none'],
+	enum => ['spice', 'alsa', 'pa', 'pipewire', 'none'],
 	default => 'spice',
 	optional => 1,
 	description => "Driver backend for the audio device."
     },
+	server =>  {
+	type => 'string',
+	pattern => '^(([^:/?#]+):)?(//([^/?#]*))?([^?#]*)(\?([^#]*))?(#(.*))?',
+	default => '',
+	optional => 1,
+	description => "Local or network address of the audio server",
+	format_description => 'uri://host:port'
+    },
 };
 
 my $spice_enhancements_fmt = {
@@ -671,7 +693,7 @@ EODESCR
     bios => {
 	optional => 1,
 	type => 'string',
-	enum => [ qw(seabios ovmf) ],
+	enum => [ qw(seabios ovmf openbios-sparc32 openbios-sparc64 ss5.bin ss10_v2.25_rom ss20_v2.25_rom) ],
 	description => "Select BIOS implementation.",
 	default => 'seabios',
     },
@@ -876,6 +898,8 @@ my $nic_model_list = [
     'rtl8139',
     'virtio',
     'vmxnet3',
+    'sunhme',
+    'lance',
 ];
 my $nic_model_list_txt = join(' ', sort @$nic_model_list);
 
@@ -1418,7 +1442,9 @@ sub print_drivedevice_full {
 	my $device_type = PVE::QemuServer::Drive::get_scsi_device_type(
 	    $drive, $storecfg, $machine_version);
 
-	if (!$conf->{scsihw} || $conf->{scsihw} =~ m/^lsi/ || $conf->{scsihw} eq 'pvscsi') {
+	if ($arch eq 'sparc') {
+		$device = "scsi-$device_type,channel=0,scsi-id=$unit,lun=0";
+	} elsif (!$conf->{scsihw} || $conf->{scsihw} =~ m/^lsi/ || $conf->{scsihw} eq 'pvscsi') {
 	    $device = "scsi-$device_type,bus=$controller_prefix$controller.0,scsi-id=$unit";
 	} else {
 	    $device = "scsi-$device_type,bus=$controller_prefix$controller.0,channel=0,scsi-id=0"
@@ -1490,6 +1516,9 @@ sub print_drivedevice_full {
 	$device .= ",serial=$serial";
     }
 
+	if ($arch =~ m/^sparc/ && $drive->{media} && $drive->{media} eq 'cdrom') {
+		$device .= ",physical_block_size=512";
+	}
 
     return $device;
 }
@@ -3139,6 +3168,7 @@ sub conf_has_audio {
 	dev_id => "audiodev$id",
 	backend => $audiodriver,
 	backend_id => "$audiodriver-backend${id}",
+	server => $audioproperties->{server},
     };
 }
 
@@ -3155,6 +3185,20 @@ sub audio_devs {
 
     if ($audio->{dev} eq 'AC97') {
 	push @$devs, '-device', "AC97,id=${id}${audiopciaddr}$audiodev";
+    } elsif ($audio->{dev} eq 'sb16') {
+	push @$devs, '-device', "sb16,id=${id}$audiodev";
+    } elsif ($audio->{dev} eq 'adlib') {
+	push @$devs, '-device', "adlib,id=${id}$audiodev";
+    } elsif ($audio->{dev} eq 'pcspk') {
+	if (min_version($machine_version, 4, 2)) {
+	push @$devs, '-machine', "pcspk-audiodev=$audio->{backend_id}";
+	}
+	} elsif ($audio->{dev} eq 'sb16-adlib-pcspk') {
+	if (min_version($machine_version, 4, 2)) {
+	push @$devs, '-machine', "pcspk-audiodev=$audio->{backend_id}";
+	push @$devs, '-device', "sb16$audiodev";
+	push @$devs, '-device', "adlib$audiodev";
+	}
     } elsif ($audio->{dev} =~ /intel\-hda$/) {
 	push @$devs, '-device', "$audio->{dev},id=${id}${audiopciaddr}";
 	push @$devs, '-device', "hda-micro,id=${id}-codec0,bus=${id}.0,cad=0$audiodev";
@@ -3163,7 +3207,20 @@ sub audio_devs {
 	die "unknown audio device '$audio->{dev}', implement me!";
     }
 
-    push @$devs, '-audiodev', "$audio->{backend},id=$audio->{backend_id}";
+	my $audioOptions = "";
+	if (defined($audio->{server}) && $audio->{server} ne '') {
+		if ($audio->{backend} eq 'pa') {
+			print "-- Using audio backend $audio->{backend} with server $audio->{server}\n";
+			$audioOptions = ",server=$audio->{server}";
+		} else {
+			print "Audio backend: $audio->{backend} not valid for server option\n";
+		}
+	} elsif ($audio->{backend} eq 'pa') {
+		print "Audio backend $audio->{backend} without server value, will attempt to connect via XDG\n";
+		$ENV{XDG_RUNTIME_DIR} = '/run/user/' . $<;
+	}
+
+    push @$devs, '-audiodev', "$audio->{backend},id=$audio->{backend_id}$audioOptions";
 
     return $devs;
 }
@@ -3372,11 +3429,14 @@ sub get_ovmf_files($$$) {
 }
 
 my $Arch2Qemu = {
+    sparc => '/usr/bin/qemu-system-sparc',
+    sparc64 => '/usr/bin/qemu-system-sparc64',
     aarch64 => '/usr/bin/qemu-system-aarch64',
     x86_64 => '/usr/bin/qemu-system-x86_64',
 };
-sub get_command_for_arch($) {
-    my ($arch) = @_;
+sub get_command_for_arch($$) {
+    my ($arch, $vga) = @_;
+	return '/usr/bin/qemu-system-x86_64-3dfx' if is_native_arch($arch) && $vga->{mesa} == 1;
     return '/usr/bin/kvm' if is_native_arch($arch);
 
     my $cmd = $Arch2Qemu->{$arch}
@@ -3405,7 +3465,7 @@ sub get_command_for_arch($) {
 # since kvm and tcg machines support different flags
 #
 sub query_supported_cpu_flags {
-    my ($arch) = @_;
+    my ($arch, $conf) = @_;
 
     $arch //= get_host_arch();
     my $default_machine = $default_machines->{$arch};
@@ -3418,7 +3478,7 @@ sub query_supported_cpu_flags {
 	$arch eq "aarch64";
 
     my $kvm_supported = defined(kvm_version());
-    my $qemu_cmd = get_command_for_arch($arch);
+    my $qemu_cmd = get_command_for_arch($arch, parse_vga($conf->{vga}));
     my $fakevmid = -1;
     my $pidfile = PVE::QemuServer::Helpers::pidfile_name($fakevmid);
 
@@ -3507,7 +3567,7 @@ sub query_understood_cpu_flags {
 my sub should_disable_smm {
     my ($conf, $vga, $machine) = @_;
 
-    return if $machine =~ m/^virt/; # there is no smm flag that could be disabled
+    return if $machine =~ m/^virt/ || $machine =~ m/^SS\-/; # there is no smm flag that could be disabled
 
     return (!defined($conf->{bios}) || $conf->{bios} eq 'seabios') &&
 	$vga->{type} && $vga->{type} =~ m/^(serial\d+|none)$/;
@@ -3611,7 +3671,7 @@ sub config_to_command {
     my $machine_conf = PVE::QemuServer::Machine::parse_machine($conf->{machine});
 
     my $arch = get_vm_arch($conf);
-    my $kvm_binary = get_command_for_arch($arch);
+    my $kvm_binary = get_command_for_arch($arch, parse_vga($conf->{vga}));
     my $kvmver = kvm_user_version($kvm_binary);
 
     if (!$kvmver || $kvmver !~ m/^(\d+)\.(\d+)/ || $1 < 3) {
@@ -3710,9 +3770,13 @@ sub config_to_command {
 		$value =~ s/,/,,/g;
 		$smbios_string .= "," . $key . "=" . $value if $value;
 	    }
-	    push @$cmd, '-smbios', "type=1" . $smbios_string;
+		if ($arch !~ m/^sparc/) {
+			push @$cmd, '-smbios', "type=1" . $smbios_string;
+		}
 	} else {
-	    push @$cmd, '-smbios', "type=1,$conf->{smbios1}";
+		if ($arch !~ m/^sparc/) {
+			push @$cmd, '-smbios', "type=1,$conf->{smbios1}";
+		}
 	}
     }
 
@@ -3726,6 +3790,10 @@ sub config_to_command {
 	push $cmd->@*, '-drive', $var_drive_str;
     }
 
+    if ($conf->{bios} && ($conf->{bios} eq 'ovmf' || $conf->{arch} && $conf->{arch} =~ m/^sparc/)) {
+        push @$cmd, '-bios', "$conf->{bios}";
+    }
+
     if ($q35) { # tell QEMU to load q35 config early
 	# we use different pcie-port hardware for qemu >= 4.0 for passthrough
 	if (min_version($machine_version, 4, 0)) {
@@ -3744,9 +3812,11 @@ sub config_to_command {
     }
 
     # add usb controllers
+    if ($arch !~ m/^sparc/) {
     my @usbcontrollers = PVE::QemuServer::USB::get_usb_controllers(
 	$conf, $bridges, $arch, $machine_type, $machine_version);
     push @$devices, @usbcontrollers if @usbcontrollers;
+    }
 
     my ($vga, $qxlnum) = get_vga_properties($conf, $arch, $machine_version, $winversion);
 
@@ -3765,7 +3835,6 @@ sub config_to_command {
     }
 
     my $bootorder = device_bootorder($conf);
-
     # host pci device passthrough
     my ($kvm_off, $gpu_passthrough, $legacy_igd, $pci_devices) = PVE::QemuServer::PCI::print_hostpci_devices(
 	$vmid, $conf, $devices, $vga, $winversion, $bridges, $arch, $machine_type, $bootorder);
@@ -3852,7 +3921,21 @@ sub config_to_command {
 
     push @$cmd, '-no-reboot' if  defined($conf->{reboot}) && $conf->{reboot} == 0;
 
-    if ($vga->{type} && $vga->{type} !~ m/^serial\d+$/ && $vga->{type} ne 'none'){
+	$ENV{DISPLAY} = '';
+	if ($vga->{type} && defined($vga->{server}) && $vga->{server} ne '') {
+		# TODO: gtk/sdl need sdl for 3dfx passthru, should ,gl=on be default?
+		my $displayType = 'gtk';
+		if ($vga->{mesa} == 1) {
+			$displayType = 'sdl';
+		}
+		print "-- Using $displayType display with $vga->{type} driver and host $vga->{server}\n";
+        push @$cmd, '-vga', $vga->{type};
+		push @$cmd, '-display', $displayType;
+	    # TODO: we can also enable VNC here, not sure if there are drawbacks
+	    #my $socket = PVE::QemuServer::Helpers::vnc_socket($vmid);
+	    #push @$cmd,  '-vnc', "unix:$socket,password=on";
+		$ENV{DISPLAY} = $vga->{server};
+    } elsif ($vga->{type} && $vga->{type} !~ m/^serial\d+$/ && $vga->{type} ne 'none'){
 	push @$devices, '-device', print_vga_device(
 	    $conf, $vga, $arch, $machine_version, $machine_type, undef, $qxlnum, $bridges);
 
@@ -3891,11 +3974,13 @@ sub config_to_command {
 	push @$rtcFlags, 'base=localtime';
     }
 
+    if ($arch !~ m/^sparc/) { # TODO: support specifying cpu type for sparc platforms, until then let the machine use its default
     if ($forcecpu) {
 	push @$cmd, '-cpu', $forcecpu;
     } else {
 	push @$cmd, get_cpu_options($conf, $arch, $kvm, $kvm_off, $machine_version, $winversion, $gpu_passthrough);
     }
+	}
 
     PVE::QemuServer::Memory::config(
 	$conf, $vmid, $sockets, $cores, $hotplug_features->{memory}, $cmd);
@@ -4063,8 +4148,10 @@ sub config_to_command {
 		$queues = ",num_queues=$drive->{queues}";
 	    }
 
+	    push @$devices, '-device', "$scsihw_type,id=$controller_prefix$controller$pciaddr$iothread$queues,bus=pciB"
+		if !$scsicontroller->{$controller} && $arch eq 'sparc64';
 	    push @$devices, '-device', "$scsihw_type,id=$controller_prefix$controller$pciaddr$iothread$queues"
-		if !$scsicontroller->{$controller};
+		if !$scsicontroller->{$controller} && $arch !~ m/^sparc/;
 	    $scsicontroller->{$controller}=1;
 	}
 
@@ -4107,12 +4194,27 @@ sub config_to_command {
 	$d->{bootindex} = $bootorder->{$netname} if $bootorder->{$netname};
 
 	my $netdevfull = print_netdev_full($vmid, $conf, $arch, $d, $netname);
-	push @$devices, '-netdev', $netdevfull;
+	if ($arch eq 'sparc') {
+		$netdevfull =~ s/net0/lance.0/;
+		push @$devices, '-net', $netdevfull;
+	} else {
+		push @$devices, '-netdev', $netdevfull;
+	}
 
 	my $netdevicefull = print_netdevice_full(
 	    $vmid, $conf, $d, $netname, $bridges, $use_old_bios_files, $arch, $machine_type, $machine_version);
 
-	push @$devices, '-device', $netdevicefull;
+	if ($arch eq 'sparc') {
+		# lance is builtin and not pluggable on the sparc platform
+		push @$devices, '-net', "nic,model=lance,macaddr=08:00:20:b5:09:67"; # TODO: fix static hw
+	} elsif ($arch eq 'sparc64') {
+	    # On a real Ultra 5 all PCI devices are attached behind the two simba bridges;
+		# in-built devices are attached to bus A whilst bus B has 4 free PCI slots for use.
+		# https://wiki.qemu.org/Documentation/Platforms/SPARC
+	    push @$devices, '-device', "$netdevicefull,bus=pciB";
+	} else {
+	    push @$devices, '-device', $netdevicefull;
+	}
     }
 
     if ($conf->{ivshmem}) {
@@ -4136,7 +4238,7 @@ sub config_to_command {
     # pci.4 is nested in pci.1
     $bridges->{1} = 1 if $bridges->{4};
 
-    if (!$q35) { # add pci bridges
+    if (!$q35 && $arch !~ m/^sparc/) { # add pci bridges
 	if (min_version($machine_version, 2, 3)) {
 	   $bridges->{1} = 1;
 	   $bridges->{2} = 1;
@@ -4159,6 +4261,8 @@ sub config_to_command {
 	} else {
 	    unshift @$devices, '-device', $devstr if $k > 0;
 	}
+
+	print "Debug: q35=$q35 k=$k arch=$arch machine=$machine_type devstr=$devstr\n";
     }
 
     if (!$kvm) {
@@ -5981,6 +6085,9 @@ sub vm_start_nolock {
 		$tpmpid = start_swtpm($storecfg, $vmid, $tpm, $migratedfrom);
 	    }
 
+        print "cmd:\n";
+        foreach($cmd) { print join(" ", map { /^-/ ? $_ : "$_ \\\n" } @$_), "\n"; }
+
 	    my $exitcode = run_command($cmd, %run_params);
 	    if ($exitcode) {
 		if ($tpmpid) {
diff --git a/PVE/QemuServer/Drive.pm b/PVE/QemuServer/Drive.pm
index 6e98c09..56e69e4 100644
--- a/PVE/QemuServer/Drive.pm
+++ b/PVE/QemuServer/Drive.pm
@@ -662,7 +662,7 @@ sub parse_drive {
     if ($res->{media} && ($res->{media} eq 'cdrom')) {
 	return if $res->{snapshot} || $res->{trans} || $res->{format};
 	return if $res->{heads} || $res->{secs} || $res->{cyls};
-	return if $res->{interface} eq 'virtio';
+	#return if $res->{interface} eq 'virtio'; // I have no idea why this was disabled in the first place, so I've basically fucked around and later I might find out :)
     }
 
     if (my $size = $res->{size}) {
diff --git a/PVE/QemuServer/Machine.pm b/PVE/QemuServer/Machine.pm
index a3917da..c98de20 100644
--- a/PVE/QemuServer/Machine.pm
+++ b/PVE/QemuServer/Machine.pm
@@ -18,7 +18,7 @@ my $machine_fmt = {
 	default_key => 1,
 	description => "Specifies the QEMU machine type.",
 	type => 'string',
-	pattern => '(pc|pc(-i440fx)?-\d+(\.\d+)+(\+pve\d+)?(\.pxe)?|q35|pc-q35-\d+(\.\d+)+(\+pve\d+)?(\.pxe)?|virt(?:-\d+(\.\d+)+)?(\+pve\d+)?)',
+	pattern => '(pc|pc(-i440fx)?-\d+(\.\d+)+(\+pve\d+)?(\.pxe)?|q35|pc-q35-\d+(\.\d+)+(\+pve\d+)?(\.pxe)?|virt(?:-\d+(\.\d+)+)?(\+pve\d+)?|sun4[a-z]{1}|SS-\d{1,2})',
 	maxLength => 40,
 	format_description => 'machine type',
 	optional => 1,
diff --git a/PVE/QemuServer/PCI.pm b/PVE/QemuServer/PCI.pm
index 491ba07..897a118 100644
--- a/PVE/QemuServer/PCI.pm
+++ b/PVE/QemuServer/PCI.pm
@@ -284,6 +284,11 @@ sub print_pci_addr {
 
     my $res = '';
 
+    if ($arch =~ m/^sparc/) {
+      print "sparc/sparc64 does not support PCI devices, ignoring: $id\n";
+      return $res;
+    }
+
     # using same bus slots on all HW, so we need to check special cases here:
     my $busname = 'pci';
     if ($arch eq 'aarch64' && $machine =~ /^virt/) {
diff --git a/PVE/QemuServer/USB.pm b/PVE/QemuServer/USB.pm
index 017ef9c..0bbbb82 100644
--- a/PVE/QemuServer/USB.pm
+++ b/PVE/QemuServer/USB.pm
@@ -134,8 +134,9 @@ sub get_usb_controllers {
     my $is_q35 = PVE::QemuServer::Machine::machine_type_is_q35($conf);
 
     if ($arch eq 'aarch64') {
-        $pciaddr = print_pci_addr('ehci', $bridges, $arch, $machine);
         push @$devices, '-device', "usb-ehci,id=ehci$pciaddr";
+    } elsif ($arch =~ m/^sparc/) {
+        print "USB disabled for sparc/sparc64\n";
     } elsif (!$is_q35) {
         $pciaddr = print_pci_addr("piix3", $bridges, $arch, $machine);
         push @$devices, '-device', "piix3-usb-uhci,id=uhci$pciaddr.0x2";
@@ -152,7 +153,7 @@ sub get_usb_controllers {
 	$use_usb2 = 1 if !$d->{usb3};
     }
 
-    if (!$use_qemu_xhci && !$is_q35 && $use_usb2 && $arch ne 'aarch64') {
+    if (!$use_qemu_xhci && !$is_q35 && $use_usb2 && $arch ne 'aarch64' && $arch !~ m/^sparc/) {
 	# include usb device config if still on x86 before-xhci machines and if USB 3 is not used
 	push @$devices, '-readconfig', '/usr/share/qemu-server/pve-usb.cfg';
     }
